# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1736k9_JkMn2YsYsii7hnKACckIrcpasA
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Đọc dữ liệu từ tệp CSV
file_path = 'supermarket_sales.csv'  # Thay thế bằng đường dẫn đến tệp CSV của bạn
df = pd.read_csv(file_path)

# Hiển thị thông tin chung về DataFrame
print("Thông tin chung về DataFrame:")
print(df.info())

# Hiển thị các dòng đầu tiên của DataFrame
print("\nCác dòng đầu tiên của DataFrame:")
print(df.head())

# Kiểm tra các giá trị trống
print("\nKiểm tra các giá trị trống:")
print(df.isnull().sum())

# Thống kê mô tả cho các cột số
print("\nThống kê mô tả cho các cột số:")
print(df.describe())

# Thống kê mô tả cho các cột phân loại
print("\nThống kê mô tả cho các cột phân loại:")
print(df.describe(include=['O']))

# Phân tích cột 'City'
print("\nPhân tích cột 'City':")
print(df['City'].value_counts())

# Phân tích cột 'Product line'
print("\nPhân tích cột 'Product line':")
print(df['Product line'].value_counts())

# Phân tích cột 'Payment'
print("\nPhân tích cột 'Payment':")
print(df['Payment'].value_counts())

# Phân tích cột 'Rating'
print("\nPhân tích cột 'Rating':")
print(df['Rating'].describe())

# Phân phối của cột 'Rating'
plt.figure(figsize=(10, 6))
sns.histplot(df['Rating'], kde=True, bins=20)
plt.title('Phân phối của cột Rating')
plt.xlabel('Rating')
plt.ylabel('Tần số')
plt.show()

# Phân phối của cột 'Total'
plt.figure(figsize=(10, 6))
sns.histplot(df['Total'], kde=True, bins=20)
plt.title('Phân phối của cột Total')
plt.xlabel('Total')
plt.ylabel('Tần số')
plt.show()

# Biểu đồ hộp cho 'Total' theo 'City'
plt.figure(figsize=(10, 6))
sns.boxplot(x='City', y='Total', data=df)
plt.title('Biểu đồ hộp cho Total theo City')
plt.xlabel('City')
plt.ylabel('Total')
plt.show()

# Biểu đồ hộp cho 'Rating' theo 'Product line'
plt.figure(figsize=(10, 6))
sns.boxplot(x='Product line', y='Rating', data=df)
plt.title('Biểu đồ hộp cho Rating theo Product line')
plt.xlabel('Product line')
plt.ylabel('Rating')
plt.show()

# Biểu đồ đếm cho 'Payment'
plt.figure(figsize=(10, 6))
sns.countplot(x='Payment', data=df)
plt.title('Biểu đồ đếm cho Payment')
plt.xlabel('Payment')
plt.ylabel('Tần số')
plt.show()

# Biểu đồ thanh cho 'Branch'
plt.figure(figsize=(10, 6))
sns.countplot(x='Branch', data=df)
plt.title('Biểu đồ thanh cho Branch')
plt.xlabel('Branch')
plt.ylabel('Tần số')
plt.show()

# Biểu đồ thanh cho 'Customer type'
plt.figure(figsize=(10, 6))
sns.countplot(x='Customer type', data=df)
plt.title('Biểu đồ thanh cho Customer type')
plt.xlabel('Customer type')
plt.ylabel('Tần số')
plt.show()

# Biểu đồ tròn cho 'City'
plt.figure(figsize=(10, 6))
df['City'].value_counts().plot.pie(autopct='%1.1f%%')
plt.title('Biểu đồ tròn cho City')
plt.ylabel('')
plt.show()

# Biểu đồ cặp (pair plot) để phân tích mối quan hệ giữa các cột số
plt.figure(figsize=(12, 10))
sns.pairplot(df[['Unit price', 'Quantity', 'Tax 5%', 'Total', 'cogs', 'gross income', 'Rating']])
plt.show()

# Biểu đồ scatter cho 'Unit price' và 'Rating'
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Unit price', y='Rating', data=df)
plt.title('Biểu đồ scatter cho Unit price và Rating')
plt.xlabel('Unit price')
plt.ylabel('Rating')
plt.show()

# Biểu đồ đường (line plot) cho 'Total' theo 'Date'
plt.figure(figsize=(14, 7))
df['Date'] = pd.to_datetime(df['Date'])
df.sort_values('Date', inplace=True)
sns.lineplot(x='Date', y='Total', data=df)
plt.title('Biểu đồ đường cho Total theo Date')
plt.xlabel('Date')
plt.ylabel('Total')
plt.show()

# Phân tích tương quan giữa các cột số
plt.figure(figsize=(12, 10))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Ma trận tương quan')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Đọc dữ liệu từ tệp CSV
file_path = 'supermarket_sales.csv'  # Thay thế bằng đường dẫn đến tệp CSV của bạn
df = pd.read_csv(file_path)

# Chuyển đổi cột Date sang kiểu datetime
df['Date'] = pd.to_datetime(df['Date'])

# Trích xuất các đặc trưng từ cột Date
df['Day'] = df['Date'].dt.day
df['Month'] = df['Date'].dt.month
df['Year'] = df['Date'].dt.year

# Lựa chọn các cột cần thiết cho mô hình
features = ['Unit price', 'Quantity', 'Day', 'Month', 'Year']
target = 'Total'

# Tạo DataFrame mới với các cột đã chọn
data = df[features + [target]]

# Hiển thị thông tin chung về DataFrame
print("Thông tin chung về DataFrame:")
print(data.info())

# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
X = data[features]
y = data[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Hiển thị kích thước của các tập dữ liệu
print(f"Kích thước của X_train: {X_train.shape}")
print(f"Kích thước của X_test: {X_test.shape}")
print(f"Kích thước của y_train: {y_train.shape}")
print(f"Kích thước của y_test: {y_test.shape}")

# Khởi tạo mô hình hồi quy tuyến tính
model = LinearRegression()

# Huấn luyện mô hình trên tập huấn luyện
model.fit(X_train, y_train)

# Dự đoán trên tập kiểm tra
y_pred = model.predict(X_test)

# Đánh giá mô hình
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2): {r2}")

# Trực quan hóa kết quả dự đoán so với giá trị thực tế
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel('Giá trị thực tế')
plt.ylabel('Giá trị dự đoán')
plt.title('Giá trị thực tế so với giá trị dự đoán')
plt.show()